public class EvenOddPrinter {
    private static final int MAX_NUMBER = 20;
    private int number = 1;
    private boolean isEvenTurn = false;

    public synchronized void printEven() {
        while (number <= MAX_NUMBER) {
            while (!isEvenTurn) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            if (number <= MAX_NUMBER) {
                System.out.println("Even Thread: " + number);
                number++;
                isEvenTurn = false;
                notifyAll();
            }
        }
    }

    public synchronized void printOdd() {
        while (number <= MAX_NUMBER) {
            while (isEvenTurn) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            if (number <= MAX_NUMBER) {
                System.out.println("Odd Thread: " + number);
                number++;
                isEvenTurn = true;
                notifyAll();
            }
        }
    }

    public static void main(String[] args) {
        EvenOddPrinter printer = new EvenOddPrinter();

        Thread evenThread = new Thread(() -> printer.printEven());
        Thread oddThread = new Thread(() -> printer.printOdd());

        oddThread.start();
        evenThread.start();
    }
}